#pragma once

#include <cmath>
#include <memory>
#include <list>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include <map>
#include <memory>
#include <cstring>

template<typename... Ts>
std::vector<std::byte> make_bytes(Ts&&... args) noexcept {
return{std::byte(std::forward<Ts>(args))...};
}

/// @todo testen
unsigned short ReadByteValuesFromBuffer(const char* buffer, size_t bufferSize, size_t startIndex, size_t numBytesToRead)
{
    if (startIndex >= bufferSize)
    {
        std::cout << "Error: Invalid starting index." << std::endl;
        return;
    }
    if (startIndex + numBytesToRead > bufferSize)
    {
        std::cout << "Error: Insufficient buffer size." << std::endl;
        return;
    }
    unsigned short value;
    std::memcpy(&value, buffer + startIndex, numBytesToRead);
    return value;
}

int BinaryCodedDecimalToInteger(int value)
        {
            if (value != 0xFF)
            {
                int lowerNibble = value & 0x0F;
                int upperNibble = value >> 4;

                int multipleOfOne = lowerNibble;
                int multipleOfTen = upperNibble * 10;

                return (multipleOfOne + multipleOfTen);
            }
            else return 0;
        }

/// @todo testen
char* ReadBytesFromBuffer(const char* buffer, size_t bufferSize, size_t startIndex, size_t numBytesToRead)
{
    if (startIndex >= bufferSize)
    {
        std::cout << "Error: Invalid starting index." << std::endl;
        return;
    }
    if (startIndex + numBytesToRead > bufferSize)
    {
        std::cout << "Error: Insufficient buffer size." << std::endl;
        return;
    }
    char* read_buffer;
    std::memcpy(read_buffer, buffer + startIndex, numBytesToRead);
    return read_buffer;
}

        //Date and Time
        const int NOM_ATTR_TIME_ABS = 0x987;
        //Sample Period
        const int NOM_ATTR_TIME_PD_SAMP = 0x98d;
        //Relative Time
        const int NOM_ATTR_TIME_REL = 0x98f;
        //Absolute Time Stamp
        const int NOM_ATTR_TIME_STAMP_ABS = 0x990;
        //Relative Time Stamp
        const int NOM_ATTR_TIME_STAMP_REL = 0x991;
        //Patient Date of Birth
        const int NOM_ATTR_PT_DOB = 0x958;
        //Patient ID
        const int NOM_ATTR_PT_ID = 0x95a;
        //Family Name
        const int NOM_ATTR_PT_NAME_FAMILY = 0x95c;
        //Given Name
        const int NOM_ATTR_PT_NAME_GIVEN = 0x95d;

//ROapdus
    const unsigned char ROIV_APDU = 1;
    const unsigned char RORS_APDU = 2;
    const unsigned char ROER_APDU = 3;
    const unsigned char RORLS_APDU = 5;

auto aarq_msg = make_bytes(
    0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80, 0x00, 0x14, 0x02, 0x00, 0x02,
    0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2, 0x80, 0xA0, 0x03, 0x00,
    0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30,
    0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06,
    0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE,
    0x80, 0x28, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x01, 0x02, 0x01, 0x02, 0x81, 0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x2C, 0x00, 0x01, 0x00, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00,
    0x09, 0xC4, 0x00, 0x00, 0x03, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    );
auto aarq_msg_ext_poll = make_bytes(
    0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80, 0x00, 0x14, 0x02, 0x00, 0x02,
    0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2, 0x80, 0xA0, 0x03, 0x00,
    0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30,
    0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06,
    0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE,
    0x80, 0x28, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x01, 0x02, 0x01, 0x02, 0x81, 0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x2C, 0x00, 0x01, 0x00, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00,
    0x09, 0xC4, 0x00, 0x00, 0x03, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  );

auto aarq_msg_ext_poll2 = make_bytes(
    0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80, 0x00, 0x14, 0x02, 0x00, 0x02,
    0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2, 0x80, 0xA0, 0x03, 0x00,
    0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30,
    0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06,
    0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE,
    0x80, 0x28, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x01, 0x02, 0x01, 0x02, 0x81, 0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x2C, 0x00, 0x01, 0x00, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
    0x09, 0xC4, 0x00, 0x00, 0x03, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  );

auto aarq_msg_wave_ext_poll = make_bytes(
    0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80, 0x00, 0x14, 0x02, 0x00, 0x02,
    0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2, 0x80, 0xA0, 0x03, 0x00,
    0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30,
    0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06, 0x0C,
    0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06,
    0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE,
    0x80, 0x28, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x01, 0x02, 0x01, 0x02, 0x81, 0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x2C, 0x00, 0x01, 0x00, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
    0x09, 0xC4, 0x00, 0x00, 0x03, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  );

auto aarq_msg_wave_ext_poll2 =
    make_bytes(
    0x0D, 0xFF, 0x01, 0x28, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80, 0x00, 0x14, 0x02,
    0x00, 0x02, 0xC1, 0xFF, 0x01, 0x16, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2,
    0x80, 0xA0, 0x03, 0x00, 0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52,
    0x01, 0x00, 0x01, 0x30, 0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02,
    0x01, 0x02, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x30, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60,
    0x80, 0xA1, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03,
    0x01, 0x00, 0x00, 0xBE, 0x80, 0x28, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x81, 0x82, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x01, 0x00, 0x28, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0F, 0xA0, 0x00, 0x00, 0x05, 0xB0, 0x00, 0x00, 0x05, 0xB0, 0xFF, 0xFF, 0xFF, 0xFF,
    0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x8E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x34, 0x00, 0x06, 0x00, 0x30, 0x00, 0x01, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0xC9, 0x00, 0x01, 0x00, 0x09,
    0x00, 0x00, 0x00, 0x3C, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x2A,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    );

auto mds_create_resp_msg = make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x14, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0E, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xBD, 0x00, 0x0D, 0x06, 0x00, 0x00 );

auto poll_mds_request_msg = make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x07, 0x00, 0x16, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x16, 0x00, 0x08, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x21, 0x00, 0x00 );

auto poll_request_msg = make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x07, 0x00, 0x16, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x16, 0x00, 0x08, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x06, 0x00, 0x00 );

auto poll_request_msg2 = make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x07, 0x00, 0x16, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x16, 0x00, 0x08, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x21, 0x08, 0x0C);

auto poll_request_msg3 =
    make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x16, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x00, 0x08, 0x00, 0x05, 0x00, 0x01,
    0x00, 0x2a, 0x08, 0x07
    );

auto poll_request_msg4 =
    make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x10, 0x00, 0x07, 0x00, 0x16, 0x00, 0x21,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x00, 0x08, 0x00, 0x0f,
    0x00, 0x01, 0x00, 0x20, 0x00, 0x36, 0x08, 0x11
    );

auto ext_poll_request_msg3 =
    make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x04, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00, 0x14, 0x00, 0x03, 0x00, 0x01,
    0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04, 0x00, 0x49, 0x3e, 0x00
    );

auto ext_poll_request_msg = make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x20, 0x00, 0x01, 0x00, 0x07, 0x00, 0x1A, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x3B, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 );

auto ext_poll_request_msg2 = make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x20, 0x00, 0x01, 0x00, 0x07, 0x00, 0x1A, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x3B, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x06, 0x00, 0x01, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00);

auto ext_poll_request_msg4 =
    make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x03, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00, 0x14, 0x00, 0x02, 0x00, 0x01,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04, 0x00, 0x49, 0x3e, 0x00
    );

auto ext_poll_request_msg5 =
    make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x01, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x3B, 0x00, 0x14, 0x00, 0x01, 0x00, 0x01,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xF1, 0x3E, 0x00, 0x04, 0x00, 0x03, 0xA9, 0x80
    );

auto ext_poll_request_wave_msg3 =
    make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x01, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x3B, 0x00, 0x14, 0x00, 0x02, 0x00, 0x01,
    0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xF1, 0x3E, 0x00, 0x04, 0x00, 0x03, 0xA9, 0x80
    );

auto ext_poll_request_wave_msg =
    make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x04, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00, 0x14, 0x00, 0x03, 0x00, 0x01,
    0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04, 0x00, 0x49, 0x3e, 0x00
    );

auto ext_poll_request_wave_msg2 =
    make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x04, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00, 0x14, 0x00, 0x03, 0x00, 0x01,
    0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04, 0x00, 0x49, 0x3e, 0x00
    );

auto ext_poll_request_alert_msg =
    make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x05, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00, 0x14, 0x00, 0x04, 0x00, 0x01,
    0x00, 0x36, 0x08, 0x01, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04, 0x00, 0x49, 0x3e, 0x00
    );

auto get_rtsa_prio_msg = make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x03, 0x00, 0x10, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0xF2, 0x3A );

auto keep_alive_msg =
    make_bytes(
       0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x07, 0x00, 0x16, 0x00, 0x21,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x00, 0x08, 0x00, 0x01, 0x00, 0x01,
       0x00, 0x21, 0x08, 0x0c
    );

auto set_rtsa_prio_msg =
    make_bytes(
    0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1C, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0E, 0x00, 0x00, 0xF2, 0x3A,
    0x00, 0x08, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x01, 0x02
    );

auto keep_alive_msg2 = make_bytes(
    0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x16, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x00, 0x08, 0x00, 0x07, 0x00, 0x01,
    0x00, 0x36, 0x08, 0x11
    );

auto rlrq_msg = make_bytes(
    0x09, 0x18, 0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x62, 0x80, 0x80,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 );

auto rlrq_resp_msg = make_bytes(
    0x0A, 0x18, 0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x63, 0x80, 0x80,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 );

auto assoc_abort_resp_msg = make_bytes(
    0x19, 0x2E, 0x11, 0x01, 0x03, 0xC1, 0x29, 0xA0, 0x80, 0xA0, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01,
    0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0,
    0x80, 0x64, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 );


